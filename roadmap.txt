# Etape 1:



------------- Setup server -------------

1. Start server / socket with sockaddr struct 
2. listen
3. accept with struct pollfd struct
4. 

************************************************FICELLO NOTES************************************************************************************
CLIENT:

Nicknames are non-empty strings with the following restrictions:

They MUST NOT contain any of the following characters: space (' ', 0x20), comma (',', 0x2C), asterisk ('*', 0x2A), question mark ('?', 0x3F), exclamation mark ('!', 0x21), at sign ('@', 0x40).
They MUST NOT start with any of the following characters: dollar ('$', 0x24), colon (':', 0x3A).
They MUST NOT start with a character listed as a channel type, channel membership prefix, or prefix listed in the IRCv3 multi-prefix Extension.
They SHOULD NOT contain any dot character ('.', 0x2E).

CHANNEL :

Channel names are strings (beginning with specified prefix characters). Apart from the requirement of the first character being a valid channel type prefix character; the only restriction on a channel name
is that it may not contain any spaces (' ', 0x20), a control G / BELL ('^G', 0x07), or a comma (',', 0x2C) (which is used as a list item separator by the protocol).
There are several types of channels used in the IRC protocol. The first standard type of channel is a regular channel, which is known to all servers that are connected to the network. The prefix character for this 
type of channel is ('#', 0x23). The second type are server-specific or local channels, where the clients connected can only see and talk to other clients on the same server. 
The prefix character for this type of channel is ('&', 0x26). Other types of channels are described in the Channel Types section. 

To create a new channel or become part of an existing channel, a user is required to join the channel using the JOIN command. If the channel doesn’t exist prior to joining, the channel is created and the creating user becomes 
a channel operator. If the channel already exists, whether or not the client successfully joins that channel depends on the modes currently set on the channel. 
For example, if the channel is set to invite-only mode (+i), the client only joins the channel if they have been invited by another user or they have been exempted from requiring an invite by the channel operators

IRC servers may also define other levels of channel moderation. These can include ‘halfop’ (half operator), ‘protected’ (protected user/operator), ‘founder’ (channel founder), and any other positions the server wishes to define. 
These moderation levels have varying privileges and can execute, and not execute, various channel management commands based on what the server defines.

The commands which may only be used by channel moderators include:

KICK: Eject a client from the channel
MODE: Change the channel’s modes
INVITE: Invite a client to an invite-only channel (mode +i)
TOPIC: Change the channel topic in a mode +t channel
Channel moderators are identified by the channel member prefix ('@' for standard channel operators, '%' for halfops) next to their nickname whenever it is associated with a channel (e.g. replies to the NAMES, WHO, and WHOIS commands).
*************************************************************************************************************************************************

************************************************MESHMESH NOTES************************************************************************************
La création d’un serveur pour ton projet IRC nécessite une approche méthodique. Voici les étapes clés à suivre, organisées de manière progressive pour que tu puisses construire ton serveur solidement :

1. Mise en place du serveur de base
a. Choisir un port pour ton serveur
Par défaut, les serveurs IRC utilisent le port 6667.
Tu peux définir ce port dans ton serveur pour qu’il écoute les connexions entrantes.
b. Créer un socket serveur
Utilise les bibliothèques réseau standards (comme <sys/socket.h> sous Linux).
Étapes principales :
Créer un socket (type TCP, protocole IPv4).
Lier le socket à une adresse IP et un port (avec bind).
Mettre le socket en écoute (listen).
Accepter les connexions entrantes (accept).
2. Gérer les connexions multiples
a. Gestion des clients
Implémente une structure pour suivre les clients connectés :
Socket de chaque client.
Adresse IP et port associés (optionnel pour le logging).
État de la connexion (actif, en attente, etc.).
b. Implémenter une boucle d’écoute
Utilise des fonctions comme select, poll, ou epoll pour gérer plusieurs clients simultanément.
Avantages :
Permet d’écouter plusieurs sockets sans bloquer.
Traite les événements comme l’arrivée de nouveaux messages ou la fermeture d’une connexion.
3. Recevoir et envoyer des messages
Réception :
Lis les données envoyées par les clients à travers le socket avec recv.
Stocke ces données pour analyse ultérieure (par exemple, parsing des messages IRC).
Envoi :
Utilise send pour transmettre des messages aux clients.
Implémente une fonction pour envoyer un message à un seul client ou à plusieurs (broadcast).
4. Gestion des clients connectés
Implémente des actions basiques pour gérer les clients :
Accepter de nouvelles connexions : ajoute-les à une liste ou un conteneur.
Détecter les déconnexions : supprime les clients inactifs.
Associer des données utilisateur : pseudonymes (NICK), canaux rejoints, etc.
5. Structurer les composants du serveur
Divise ton serveur en modules ou classes pour une meilleure organisation :

SocketServer : gestion des sockets et connexions.
ClientManager : suivi des clients et de leurs états.
ChannelManager : gestion des canaux (channels).
MessageHandler : réception et envoi des messages.
6. Ajouter un protocole de communication
Même si tu ne veux pas encore gérer les commandes IRC, prévois :

Une fonction pour parser les messages reçus (diviser en commande, arguments, etc.).
Une gestion minimale des réponses (par exemple, renvoyer une erreur si une commande est malformée).
7. Tester le serveur
Tester les connexions :

Vérifie que le serveur accepte les connexions depuis un client basique (comme Telnet) :
bash
Copy code
telnet localhost 6667
Envoie des messages simples et observe les réponses.
Tester avec un client IRC existant :

Utilise un client comme HexChat ou WeeChat pour vérifier que le serveur accepte les connexions.
Assure-toi que plusieurs utilisateurs peuvent se connecter simultanément.
8. Ajouter des fonctionnalités avancées
Une fois le serveur fonctionnel à un niveau basique :

Gère les délais et inactivités (timeout pour déconnecter un client inactif).
Implémente un système de logging pour surveiller les connexions et les messages.
Prépare l’intégration des commandes IRC (en dernier, dans ton cas).
Étapes principales récapitulées :
Initialisation du socket serveur (écoute sur un port).
Gestion des connexions multiples (acceptation et suivi des clients).
Échange de messages entre le serveur et les clients.
Organisation en modules pour garder une structure claire.
Tests progressifs avec des clients simples, puis des clients IRC.
Avec cette progression, tu pourras construire un serveur IRC robuste et prêt à accueillir les fonctionnalités avancées comme les canaux et les commandes.
*************************************************************************************************************************************************
